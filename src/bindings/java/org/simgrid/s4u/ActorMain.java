/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.2.1
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.simgrid.s4u;

public class ActorMain {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  protected ActorMain(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(ActorMain obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected static long swigRelease(ActorMain obj) {
    long ptr = 0;
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new RuntimeException("Cannot release ownership as memory is not owned");
      ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.delete();
    }
    return ptr;
  }

  @SuppressWarnings({"deprecation", "removal"})
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        simgridJNI.delete_ActorMain(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  protected void swigDirectorDisconnect() {
    swigCMemOwn = false;
    delete();
  }

  public void swigReleaseOwnership() {
    swigCMemOwn = false;
    simgridJNI.ActorMain_change_ownership(this, swigCPtr, false);
  }

  public void swigTakeOwnership() {
    swigCMemOwn = true;
    simgridJNI.ActorMain_change_ownership(this, swigCPtr, true);
  }

  public void run() {
    simgridJNI.ActorMain_run(swigCPtr, this);
  }

  public void sleep_for(double duration) {
    simgridJNI.ActorMain_sleep_for(swigCPtr, this, duration);
  }

  public void sleep_until(double wakeup_time) {
    simgridJNI.ActorMain_sleep_until(swigCPtr, this, wakeup_time);
  }

  public void execute(double flop) {
    simgridJNI.ActorMain_execute__SWIG_0(swigCPtr, this, flop);
  }

  public void execute(double flop, double priority) {
    simgridJNI.ActorMain_execute__SWIG_1(swigCPtr, this, flop, priority);
  }

  public void thread_execute(SWIGTYPE_p_s4u__Host host, double flop_amounts, int thread_count) {
    simgridJNI.ActorMain_thread_execute(swigCPtr, this, SWIGTYPE_p_s4u__Host.getCPtr(host), flop_amounts, thread_count);
  }

  public SWIGTYPE_p_simgrid__s4u__ExecPtr exec_init(double flops_amounts) {
    return new SWIGTYPE_p_simgrid__s4u__ExecPtr(simgridJNI.ActorMain_exec_init(swigCPtr, this, flops_amounts), true);
  }

  public SWIGTYPE_p_ExecPtr exec_async(double flops_amounts) {
    return new SWIGTYPE_p_ExecPtr(simgridJNI.ActorMain_exec_async(swigCPtr, this, flops_amounts), true);
  }

  public int get_pid() {
    return simgridJNI.ActorMain_get_pid(swigCPtr, this);
  }

  public int get_ppid() {
    return simgridJNI.ActorMain_get_ppid(swigCPtr, this);
  }

  public Host get_host() {
    long cPtr = simgridJNI.ActorMain_get_host(swigCPtr, this);
    return (cPtr == 0) ? null : new Host(cPtr, true);
  }

  public void set_host(SWIGTYPE_p_s4u__Host new_host) {
    simgridJNI.ActorMain_set_host(swigCPtr, this, SWIGTYPE_p_s4u__Host.getCPtr(new_host));
  }

  public void suspend() {
    simgridJNI.ActorMain_suspend(swigCPtr, this);
  }

  public void yield() {
    simgridJNI.ActorMain_yield(swigCPtr, this);
  }

  public void exit() {
    simgridJNI.ActorMain_exit(swigCPtr, this);
  }

  public static void on_termination_cb(ActorCallback code) {
    simgridJNI.ActorMain_on_termination_cb(ActorCallback.getCPtr(code), code);
  }

  public static void on_destruction_cb(ActorCallback code) {
    simgridJNI.ActorMain_on_destruction_cb(ActorCallback.getCPtr(code), code);
  }

  public void on_exit(BooleanCallback code) {
    simgridJNI.ActorMain_on_exit(swigCPtr, this, BooleanCallback.getCPtr(code), code);
  }

  public ActorMain() {
    this(simgridJNI.new_ActorMain(), true);
    simgridJNI.ActorMain_director_connect(this, swigCPtr, true, true);
  }

}
